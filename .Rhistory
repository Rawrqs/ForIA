column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total")
method = "custom"
end = TRUE
name = "E"
FUN = function(x) {x * 2}
if(class(df)[1] == "mts") temp.start = start(df)[1]
data <- as.data.frame(df)
for( i in 1:length(column) ) data <- cbind(data, FUN(data[, column[i], drop = FALSE]))
df <- PMR
if(class(df)[1] == "mts") temp.start = start(df)[1]
data <- as.data.frame(df)
for( i in 1:length(column) ) data <- cbind(data, FUN(data[, column[i], drop = FALSE]))
df
if(class(df)[1] == "mts") temp.start = start(df)[1]
data <- as.data.frame(df)
data
column = c("BG_GDP_nL", "BG_cons_total")
for( i in 1:length(column) ) data <- cbind(data, FUN(data[, column[i], drop = FALSE]))
if(end == FALSE) {
if (is.numeric(column) == TRUE) {
colnames(data) <- c(colnames(df), paste(name, colnames(df)[column],
sep = "_"))
}
else {
colnames(data) <- c(colnames(df), paste(name, column,
sep = "_"))
}
}else{
if (is.numeric(column) == TRUE) {
colnames(data) <- c(colnames(df), paste(colnames(df)[column], name,
sep = "_"))
}
else {
colnames(data) <- c(colnames(df), paste(column, name,
sep = "_"))
}
}
is.null(custom.name) == FALSE
custom.name = function(df, column, name) c(colnames(df), gsub("L", "E", column))
is.null(custom.name) == FALSE
custom.name
colnames(data) <- custom.name
custom.name()
c(colnames(df), gsub("L", "E", column)
)
addCustom <- function(df, column, FUN = log, name = deparse(substitute(FUN)), end = TRUE, custom.name = NULL){
if(class(df)[1] == "mts") temp.start = start(df)[1]
data <- as.data.frame(df)
for( i in 1:length(column) ) data <- cbind(data, FUN(data[, column[i], drop = FALSE]))
if(end == FALSE) {
if (is.numeric(column) == TRUE) {
colnames(data) <- c(colnames(df), paste(name, colnames(df)[column],
sep = "_"))
}
else {
colnames(data) <- c(colnames(df), paste(name, column,
sep = "_"))
}
}else{
if (is.numeric(column) == TRUE) {
colnames(data) <- c(colnames(df), paste(colnames(df)[column], name,
sep = "_"))
}
else {
colnames(data) <- c(colnames(df), paste(column, name,
sep = "_"))
}
}
if(is.null(custom.name) == FALSE) colnames(data) <- custom.name(df, column, name)
method <<- name
if(class(df)[1] == "mts") data = ts(data, start = temp.start)
data
}
PMR %>% transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "ntoi") %>%
transform_pmr(column = c("i_BG_GDP_nL", "i_BG_cons_total"), method = "hpt") %>%
transform_pmr(column = c("hpt_i_BG_GDP_nL", "hpt_i_BG_cons_total"), method = "itoc") %>%
# ntor, r to musi byc wartosc realna dlatego trzeba nazwac inaczej indeks o zmiennej podstawie
# trzeba napisac funkcję deflującą z mozliwoscią deflacji custom
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "ntor") %>% #koniecznie do porawy
#mozliwosc customowej zmiany nazwy
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "custom", end = TRUE, name = "E", FUN = function(x) {x * 2},
custom.name = function(df, column, name) c(colnames(df), gsub("L", "E", column)))
for( col in column ) ifelse(length(grep("L", col)) > 0, gsub("L", "E", col), paste0(col, "_E"))
column
apply(column, function(x) ifelse(length(grep("L", x)) > 0, gsub("L", "E", x), paste0(x, "_E"))
)
?apply
vapply
?vapply
sapply(column, function(x) ifelse(length(grep("L", x)) > 0, gsub("L", "E", x), paste0(x, "_E"))
)
addCustom <- function(df, column, FUN = log, name = deparse(substitute(FUN)), end = TRUE){
df <- PMR
addCustom <- function(df, column, FUN = log, name = deparse(substitute(FUN)), end = TRUE, custom.name = NULL){
if(class(df)[1] == "mts") temp.start = start(df)[1]
data <- as.data.frame(df)
for( i in 1:length(column) ) data <- cbind(data, FUN(data[, column[i], drop = FALSE]))
if(end == FALSE) {
if (is.numeric(column) == TRUE) {
colnames(data) <- c(colnames(df), paste(name, colnames(df)[column],
sep = "_"))
}
else {
colnames(data) <- c(colnames(df), paste(name, column,
sep = "_"))
}
}else{
if (is.numeric(column) == TRUE) {
colnames(data) <- c(colnames(df), paste(colnames(df)[column], name,
sep = "_"))
}
else {
colnames(data) <- c(colnames(df), paste(column, name,
sep = "_"))
}
}
if(is.null(custom.name) == FALSE) colnames(data) <- custom.name(df, column, name)
method <<- name
if(class(df)[1] == "mts") data = ts(data, start = temp.start)
data
}
addCustom <- function(df, column, FUN = log, name = deparse(substitute(FUN)), end = TRUE, custom.name = NULL){
if(class(df)[1] == "mts") temp.start = start(df)[1]
data <- as.data.frame(df)
for( i in 1:length(column) ) data <- cbind(data, FUN(data[, column[i], drop = FALSE]))
if(end == FALSE) {
if (is.numeric(column) == TRUE) {
colnames(data) <- c(colnames(df), paste(name, colnames(df)[column],
sep = "_"))
}
else {
colnames(data) <- c(colnames(df), paste(name, column,
sep = "_"))
}
}else{
if (is.numeric(column) == TRUE) {
colnames(data) <- c(colnames(df), paste(colnames(df)[column], name,
sep = "_"))
}
else {
colnames(data) <- c(colnames(df), paste(column, name,
sep = "_"))
}
}
if(is.null(custom.name) == FALSE) colnames(data) <- custom.name(df, column, name)
method <<- name
if(class(df)[1] == "mts") data = ts(data, start = temp.start)
data
}
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "custom", end = TRUE, name = "E", FUN = function(x) {x * 2},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("L", x)) > 0, gsub("L", "E", x), paste0(x, "_E")))))
PMR %>% transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "ntoi") %>%
transform_pmr(column = c("i_BG_GDP_nL", "i_BG_cons_total"), method = "hpt") %>%
transform_pmr(column = c("hpt_i_BG_GDP_nL", "hpt_i_BG_cons_total"), method = "itoc") %>%
# ntor, r to musi byc wartosc realna dlatego trzeba nazwac inaczej indeks o zmiennej podstawie
# trzeba napisac funkcję deflującą z mozliwoscią deflacji custom
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "ntor") %>% #koniecznie do porawy
#mozliwosc customowej zmiany nazwy
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "custom", end = TRUE, name = "E", FUN = function(x) {x * 2},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("L", x)) > 0, gsub("L", "E", x), paste0(x, "_E")))))
PMR %>% transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "ntoi") %>%
transform_pmr(column = c("i_BG_GDP_nL", "i_BG_cons_total"), method = "hpt") %>%
transform_pmr(column = c("hpt_i_BG_GDP_nL", "hpt_i_BG_cons_total"), method = "itoc") %>%
# ntor, r to musi byc wartosc realna dlatego trzeba nazwac inaczej indeks o zmiennej podstawie
# trzeba napisac funkcję deflującą z mozliwoscią deflacji custom
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "ntor") %>% #koniecznie do porawy
#mozliwosc customowej zmiany nazwy
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "custom", end = TRUE, name = "E", FUN = function(x) {x * df$EUR_BGN},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("L", x)) > 0, gsub("L", "E", x), paste0(x, "_E")))))
PMR %>% transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "ntoi") %>%
transform_pmr(column = c("i_BG_GDP_nL", "i_BG_cons_total"), method = "hpt") %>%
transform_pmr(column = c("hpt_i_BG_GDP_nL", "hpt_i_BG_cons_total"), method = "itoc") %>%
# ntor, r to musi byc wartosc realna dlatego trzeba nazwac inaczej indeks o zmiennej podstawie
# trzeba napisac funkcję deflującą z mozliwoscią deflacji custom
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "ntor") %>% #koniecznie do porawy
#mozliwosc customowej zmiany nazwy
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "custom", end = TRUE, name = "E", FUN = function(x) {x * .$EUR_BGN},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("L", x)) > 0, gsub("L", "E", x), paste0(x, "_E")))))
PMR %>% transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "ntoi") %>%
transform_pmr(column = c("i_BG_GDP_nL", "i_BG_cons_total"), method = "hpt") %>%
transform_pmr(column = c("hpt_i_BG_GDP_nL", "hpt_i_BG_cons_total"), method = "itoc") %>%
# ntor, r to musi byc wartosc realna dlatego trzeba nazwac inaczej indeks o zmiennej podstawie
# trzeba napisac funkcję deflującą z mozliwoscią deflacji custom
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "ntor") %>% #koniecznie do porawy
#mozliwosc customowej zmiany nazwy
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "custom", end = TRUE, name = "E", FUN = function(x) {x * PMR$EUR_BGN},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("L", x)) > 0, gsub("L", "E", x), paste0(x, "_E")))))
PMR$EUR_BGN
PMR
PMR %>% transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "ntoi") %>%
transform_pmr(column = c("i_BG_GDP_nL", "i_BG_cons_total"), method = "hpt") %>%
transform_pmr(column = c("hpt_i_BG_GDP_nL", "hpt_i_BG_cons_total"), method = "itoc") %>%
# ntor, r to musi byc wartosc realna dlatego trzeba nazwac inaczej indeks o zmiennej podstawie
# trzeba napisac funkcję deflującą z mozliwoscią deflacji custom
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "ntor") %>% #koniecznie do porawy
#mozliwosc customowej zmiany nazwy
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "custom", end = TRUE, name = "E", FUN = function(x) {x * PMR[,"EUR_BGN"]},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("L", x)) > 0, gsub("L", "E", x), paste0(x, "_E")))))
PMR[,"EUR_BGN"]
PMR[,"EUR_BGN"] * PMR[,"EUR_BGN"]
PMR %>% transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "ntoi") %>%
transform_pmr(column = c("i_BG_GDP_nL", "i_BG_cons_total"), method = "hpt") %>%
transform_pmr(column = c("hpt_i_BG_GDP_nL", "hpt_i_BG_cons_total"), method = "itoc") %>%
# ntor, r to musi byc wartosc realna dlatego trzeba nazwac inaczej indeks o zmiennej podstawie
# trzeba napisac funkcję deflującą z mozliwoscią deflacji custom
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "ntor") %>% #koniecznie do porawy
#mozliwosc customowej zmiany nazwy
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "custom", end = TRUE, name = "E", FUN = function(x) {ts(x) * PMR[,"EUR_BGN"]},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("L", x)) > 0, gsub("L", "E", x), paste0(x, "_E")))))
if(class(df)[1] == "mts") temp.start = start(df)[1]
data <- as.data.frame(df)
FUN = function(x) {x * PMR[,"EUR_BGN"]}
i = 1
FUN
data[, column[i], drop = FALSE]
FUN(data[, column[i], drop = FALSE])
PMR %>% transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "ntoi") %>%
transform_pmr(column = c("i_BG_GDP_nL", "i_BG_cons_total"), method = "hpt") %>%
transform_pmr(column = c("hpt_i_BG_GDP_nL", "hpt_i_BG_cons_total"), method = "itoc") %>%
# ntor, r to musi byc wartosc realna dlatego trzeba nazwac inaczej indeks o zmiennej podstawie
# trzeba napisac funkcję deflującą z mozliwoscią deflacji custom
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "ntor") %>% #koniecznie do porawy
#mozliwosc customowej zmiany nazwy
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "custom", end = TRUE, name = "E", FUN = function(x) {x * as.data.frame(PMR[,"EUR_BGN"])},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("L", x)) > 0, gsub("L", "E", x), paste0(x, "_E")))))
PMR %>% transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "ntoi") %>%
transform_pmr(column = c("i_BG_GDP_nL", "i_BG_cons_total"), method = "hpt") %>%
transform_pmr(column = c("hpt_i_BG_GDP_nL", "hpt_i_BG_cons_total"), method = "itoc") %>%
# ntor, r to musi byc wartosc realna dlatego trzeba nazwac inaczej indeks o zmiennej podstawie
# trzeba napisac funkcję deflującą z mozliwoscią deflacji custom
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "ntor") %>% #koniecznie do porawy
#mozliwosc customowej zmiany nazwy
transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "custom", end = TRUE, name = "E", FUN = function(x) {x * as.data.frame(PMR[,"EUR_BGN"])},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("L", x)) > 0, gsub("L", "E", x), paste0(x, "_E")))))
PMR %>% transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "ntoi") %>%
transform_pmr(column = c("i_BG_GDP_nL", "i_BG_cons_total"), method = "hpt") %>%
transform_pmr(column = c("hpt_i_BG_GDP_nL", "hpt_i_BG_cons_total"), method = "itoc") %>%
# ntor, r to musi byc wartosc realna dlatego trzeba nazwac inaczej indeks o zmiennej podstawie
# trzeba napisac funkcję deflującą z mozliwoscią deflacji custom
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "ntor") %>% #koniecznie do porawy
transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "custom", end = TRUE, name = "E", FUN = function(x) {x * as.data.frame(PMR[,"EUR_BGN"])},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("L", x)) > 0, gsub("L", "E", x), paste0(x, "_E")))))
transform_pmr <- function(data, column, method = "l", ...)
{
df <- data
temp_attr <- attributes(data)$output_table
if (method == "l")
data <- addLogs(data, column, ...)
if (method == "d")
data <- addDiffs(data, column, ...)
if (method == "hp")
data <- filterGap(data, column, ...)
if (method == "hpt")
data <- filterTrend(data, column, ...)
if (method == "(l\\d|f\\d)") {
if (method == "l\\d") lag = as.numeric(substr(method, 2, 2))
if (method == "f\\d") lag = -as.numeric(substr(method, 2, 2))
data <- lag_pmr(data, column, ...)
}
if (method == "custom")
data <- addCustom(data, column, ...)
if (length(grep("(n|q|u|r|p)to(n|q|u|r|p)", method)) == 1){
if(length(grep("(n|q|u)to(n|q|u)", method)) == 1) stop("unable to do such transformation, please revise your input to output desired")
data <- addT(data, column, FUN = get(method), name = method,
...)
}
if ((length(grep("(i|c)to(n|q|u|r|p|i|c)", method)) == 1) | (length(grep("(n|q|u|r|p|i|c)to(i|c)", method)) == 1)) {
first <- substr(method, 1,1)
last <- substr(method, 4,4)
if(substr(method, 1,1) %in% c("q","u")) first <- "n"
if(substr(method, 4,4) %in% c("q","u")) last <- "n"
method <- paste0(first, "to", last)
data <- addI(data, column, FUN = get(method), name = method, ...)
}
if (is.null(method) | (!(method %in% c("ln", "d", "hp",
"hpt", "l", "custom")) & !(length(grep("(n|q|u|r|p|c|i)to(n|q|u|r|p|c|i)",
method)) == 1)))
stop("unsupported method")
if (is.numeric(column) == TRUE) {
new_output_table <- data.frame(variable = colnames(data)[column],
operation = rep(method, length(colnames(data)[column])),
output = colnames(data)[(dim(df)[2]+1):(dim(df)[2]+length(column))]
)
}
else {
new_output_table <- data.frame(input = column, operation = rep(method,
length(column)), output = colnames(data)[(dim(df)[2]+1):(dim(df)[2]+length(column))]
)
}
attr(data, "output_table") <- rbind(temp_attr, new_output_table)
return(data)
}
PMR %>% transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "ntoi") %>%
transform_pmr(column = c("i_BG_GDP_nL", "i_BG_cons_total"), method = "hpt") %>%
transform_pmr(column = c("hpt_i_BG_GDP_nL", "hpt_i_BG_cons_total"), method = "itoc") %>%
# ntor, r to musi byc wartosc realna dlatego trzeba nazwac inaczej indeks o zmiennej podstawie
# trzeba napisac funkcję deflującą z mozliwoscią deflacji custom
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "ntor") %>% #koniecznie do porawy
transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "custom", end = TRUE, name = "E", FUN = function(x) {x * as.data.frame(PMR[,"EUR_BGN"])},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("L", x)) > 0, gsub("L", "E", x), paste0(x, "_E"))))) %>%
transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "l1")
transform_pmr <- function(data, column, method = "l", ...)
{
df <- data
temp_attr <- attributes(data)$output_table
if (method == "l")
data <- addLogs(data, column, ...)
if (method == "d")
data <- addDiffs(data, column, ...)
if (method == "hp")
data <- filterGap(data, column, ...)
if (method == "hpt")
data <- filterTrend(data, column, ...)
if (method == "(l\\d|f\\d)") {
if (method == "l\\d") lag = as.numeric(substr(method, 2, 2))
if (method == "f\\d") lag = -as.numeric(substr(method, 2, 2))
data <- lag_pmr(data, column, ...)
}
if (method == "custom")
data <- addCustom(data, column, ...)
if (length(grep("(n|q|u|r|p)to(n|q|u|r|p)", method)) == 1){
if(length(grep("(n|q|u)to(n|q|u)", method)) == 1) stop("unable to do such transformation, please revise your input to output desired")
data <- addT(data, column, FUN = get(method), name = method,
...)
}
if ((length(grep("(i|c)to(n|q|u|r|p|i|c)", method)) == 1) | (length(grep("(n|q|u|r|p|i|c)to(i|c)", method)) == 1)) {
first <- substr(method, 1,1)
last <- substr(method, 4,4)
if(substr(method, 1,1) %in% c("q","u")) first <- "n"
if(substr(method, 4,4) %in% c("q","u")) last <- "n"
method <- paste0(first, "to", last)
data <- addI(data, column, FUN = get(method), name = method, ...)
}
if (is.null(method) | (!(method %in% c("ln", "d", "hp",
"hpt", "l", "custom")) &
!(length(grep("(n|q|u|r|p|c|i)to(n|q|u|r|p|c|i)", method)) == 1) &
!(length(grep("(l\\d|f\\d)",                      method)) == 1)  ))
stop("unsupported method")
if (is.numeric(column) == TRUE) {
new_output_table <- data.frame(variable = colnames(data)[column],
operation = rep(method, length(colnames(data)[column])),
output = colnames(data)[(dim(df)[2]+1):(dim(df)[2]+length(column))]
)
}
else {
new_output_table <- data.frame(input = column, operation = rep(method,
length(column)), output = colnames(data)[(dim(df)[2]+1):(dim(df)[2]+length(column))]
)
}
attr(data, "output_table") <- rbind(temp_attr, new_output_table)
return(data)
}
PMR %>% transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "ntoi") %>%
transform_pmr(column = c("i_BG_GDP_nL", "i_BG_cons_total"), method = "hpt") %>%
transform_pmr(column = c("hpt_i_BG_GDP_nL", "hpt_i_BG_cons_total"), method = "itoc") %>%
# ntor, r to musi byc wartosc realna dlatego trzeba nazwac inaczej indeks o zmiennej podstawie
# trzeba napisac funkcję deflującą z mozliwoscią deflacji custom
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "ntor") %>% #koniecznie do porawy
transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "custom", end = TRUE, name = "E", FUN = function(x) {x * as.data.frame(PMR[,"EUR_BGN"])},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("L", x)) > 0, gsub("L", "E", x), paste0(x, "_E"))))) %>%
transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "l1")
"f\\d" == "f1"
if (length(grep("(l\\d|f\\d)", "l1")) == 1)
length(grep("(l\\d|f\\d)", "l1")) == 1
transform_pmr <- function(data, column, method = "l", ...)
{
df <- data
temp_attr <- attributes(data)$output_table
if (method == "l")
data <- addLogs(data, column, ...)
if (method == "d")
data <- addDiffs(data, column, ...)
if (method == "hp")
data <- filterGap(data, column, ...)
if (method == "hpt")
data <- filterTrend(data, column, ...)
if (length(grep("(l\\d|f\\d)", method)) == 1) {
if (length(grep("l\\d", method)) == 1) lag =  as.numeric(substr(method, 2, 2))
if (length(grep("f\\d", method)) == 1) lag = -as.numeric(substr(method, 2, 2))
data <- lag_pmr(data, column, ...)
}
if (method == "custom")
data <- addCustom(data, column, ...)
if (length(grep("(n|q|u|r|p)to(n|q|u|r|p)", method)) == 1){
if(length(grep("(n|q|u)to(n|q|u)", method)) == 1) stop("unable to do such transformation, please revise your input to output desired")
data <- addT(data, column, FUN = get(method), name = method,
...)
}
if ((length(grep("(i|c)to(n|q|u|r|p|i|c)", method)) == 1) | (length(grep("(n|q|u|r|p|i|c)to(i|c)", method)) == 1)) {
first <- substr(method, 1,1)
last <- substr(method, 4,4)
if(substr(method, 1,1) %in% c("q","u")) first <- "n"
if(substr(method, 4,4) %in% c("q","u")) last <- "n"
method <- paste0(first, "to", last)
data <- addI(data, column, FUN = get(method), name = method, ...)
}
if (is.null(method) | (!(method %in% c("ln", "d", "hp",
"hpt", "l", "custom")) &
!(length(grep("(n|q|u|r|p|c|i)to(n|q|u|r|p|c|i)", method)) == 1) &
!(length(grep("(l\\d|f\\d)",                      method)) == 1)  ))
stop("unsupported method")
if (is.numeric(column) == TRUE) {
new_output_table <- data.frame(variable = colnames(data)[column],
operation = rep(method, length(colnames(data)[column])),
output = colnames(data)[(dim(df)[2]+1):(dim(df)[2]+length(column))]
)
}
else {
new_output_table <- data.frame(input = column, operation = rep(method,
length(column)), output = colnames(data)[(dim(df)[2]+1):(dim(df)[2]+length(column))]
)
}
attr(data, "output_table") <- rbind(temp_attr, new_output_table)
return(data)
}
transform_pmr(PMR, column = c("BG_GDP_nL", "BG_cons_total"), method = "l1")
transform_pmr(PMR, column = c("BG_GDP_nL", "BG_cons_total"), method = "f1")
transform_pmr(PMR, column = c("BG_GDP_nL", "BG_cons_total"), method = "l1")
PMR %>% transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "ntoi") %>%
transform_pmr(column = c("i_BG_GDP_nL", "i_BG_cons_total"), method = "hpt") %>%
transform_pmr(column = c("hpt_i_BG_GDP_nL", "hpt_i_BG_cons_total"), method = "itoc") %>%
# ntor, r to musi byc wartosc realna dlatego trzeba nazwac inaczej indeks o zmiennej podstawie
# trzeba napisac funkcję deflującą z mozliwoscią deflacji custom
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "ntor")
transform_pmr(column = c("BG_GDP_nL"), method = "custom", end = TRUE, name = "r", FUN = function(x) {x * as.data.frame(PMR[,"EUR_BGN"])},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("n", x)) > 0, gsub("n", "r", x), paste0(x, "_r")))))
transform_pmr(PMR, column = c("BG_GDP_nL"), method = "custom", end = TRUE, name = "r", FUN = function(x) {x * as.data.frame(PMR[,"EUR_BGN"])},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("n", x)) > 0, gsub("n", "r", x), paste0(x, "_r")))))
transform_pmr(mtcars, column = 1:2, method = "custom", end = TRUE, name = "r", FUN = function(x) {x * as.data.frame(PMR[,"EUR_BGN"])},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("n", x)) > 0, gsub("n", "r", x), paste0(x, "_r")))))
mtcars
transform_pmr(mtcars, column = 1:2, method = "custom", end = TRUE, name = "r", FUN = function(x) {x * as.data.frame(mtcars[,"disp"])},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("n", x)) > 0, gsub("n", "r", x), paste0(x, "_r")))))
transform_pmr(mtcars, column = "cyl", method = "custom", end = TRUE, name = "r", FUN = function(x) {x * as.data.frame(mtcars[,"disp"])},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("n", x)) > 0, gsub("n", "r", x), paste0(x, "_r")))))
PMR %>% transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "ntoi") %>%
transform_pmr(column = c("i_BG_GDP_nL", "i_BG_cons_total"), method = "hpt") %>%
transform_pmr(column = c("hpt_i_BG_GDP_nL", "hpt_i_BG_cons_total"), method = "itoc") %>%
# ntor, r to musi byc wartosc realna dlatego trzeba nazwac inaczej indeks o zmiennej podstawie
# trzeba napisac funkcję deflującą z mozliwoscią deflacji custom
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "ntor") %>% #koniecznie do porawy
transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "custom", end = TRUE, name = "E", FUN = function(x) {x * as.data.frame(PMR[,"EUR_BGN"])},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("L", x)) > 0, gsub("L", "E", x), paste0(x, "_E"))))) %>%
transform_pmr(PMR, column = c("BG_GDP_nL", "BG_cons_total"), method = "l1")
PMR %>% transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "ntoi") %>%
transform_pmr(column = c("i_BG_GDP_nL", "i_BG_cons_total"), method = "hpt") %>%
transform_pmr(column = c("hpt_i_BG_GDP_nL", "hpt_i_BG_cons_total"), method = "itoc") %>%
# ntor, r to musi byc wartosc realna dlatego trzeba nazwac inaczej indeks o zmiennej podstawie
# trzeba napisac funkcję deflującą z mozliwoscią deflacji custom
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "ntor")
PMR %>% transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "ntoi") %>%
transform_pmr(column = c("i_BG_GDP_nL", "i_BG_cons_total"), method = "hpt") %>%
transform_pmr(column = c("hpt_i_BG_GDP_nL", "hpt_i_BG_cons_total"), method = "itoc") %>%
# ntor, r to musi byc wartosc realna dlatego trzeba nazwac inaczej indeks o zmiennej podstawie
# trzeba napisac funkcję deflującą z mozliwoscią deflacji custom
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "ntor") %>% #koniecznie do porawy
transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "custom", end = TRUE, name = "E", FUN = function(x) {x * as.data.frame(PMR[,"EUR_BGN"])},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("L", x)) > 0, gsub("L", "E", x), paste0(x, "_E")))))
PMR %>% transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "ntoi") %>%
transform_pmr(column = c("i_BG_GDP_nL", "i_BG_cons_total"), method = "hpt") %>%
transform_pmr(column = c("hpt_i_BG_GDP_nL", "hpt_i_BG_cons_total"), method = "itoc") %>%
# ntor, r to musi byc wartosc realna dlatego trzeba nazwac inaczej indeks o zmiennej podstawie
# trzeba napisac funkcję deflującą z mozliwoscią deflacji custom
transform_pmr(column = c("hpt_c_BG_GDP_nL", "hpt_c_BG_cons_total"), method = "ntor") %>% #koniecznie do porawy
transform_pmr(column = c("BG_GDP_nL", "BG_cons_total"), method = "custom", end = TRUE, name = "E", FUN = function(x) {x * as.data.frame(PMR[,"EUR_BGN"])},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("L", x)) > 0, gsub("L", "E", x), paste0(x, "_E"))))) %>%
transform_pmr(PMR, column = c("BG_GDP_nL", "BG_cons_total"), method = "l1")
transform_pmr(PMR, column = c("BG_GDP_nL", "BG_cons_total"), method = "l1")
transform_pmr(mtcars, column = "cyl", method = "custom", end = TRUE, name = "r", FUN = function(x) {x * as.data.frame(mtcars[,"disp"])},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("n", x)) > 0, gsub("n", "r", x), paste0(x, "_r")))))
transform_pmr(data.frame(mtcars), column = "cyl", method = "custom", end = TRUE, name = "r", FUN = function(x) {x * as.data.frame(mtcars[,"disp"])},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("n", x)) > 0, gsub("n", "r", x), paste0(x, "_r")))))
transform_pmr(PMR, column = "cyl", method = "custom", end = TRUE, name = "r", FUN = function(x) {x * as.data.frame(PMR[,1])},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("n", x)) > 0, gsub("n", "r", x), paste0(x, "_r")))))
transform_pmr(PMR, column = 1, method = "custom", end = TRUE, name = "r", FUN = function(x) {x * as.data.frame(PMR[,1])},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("n", x)) > 0, gsub("n", "r", x), paste0(x, "_r")))))
class(PMR)
class(mtcars)
transform_pmr(ts(mtcars), column = 1, method = "custom", end = TRUE, name = "r", FUN = function(x) {x * as.data.frame(ts(mtcars)[,1])},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("n", x)) > 0, gsub("n", "r", x), paste0(x, "_r")))))
transform_pmr(ts(mtcars), column = ("cyl", "disp"), method = "custom", end = TRUE, name = "r", FUN = function(x) {x * as.data.frame(ts(mtcars)[,1])},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("n", x)) > 0, gsub("n", "r", x), paste0(x, "_r")))))
transform_pmr(ts(mtcars), column = c("cyl", "disp"), method = "custom", end = TRUE, name = "r", FUN = function(x) {x * as.data.frame(ts(mtcars)[,1])},
custom.name = function(df, column, name) c(colnames(df),
sapply(column, function(x) ifelse(length(grep("n", x)) > 0, gsub("n", "r", x), paste0(x, "_r")))))
document()
